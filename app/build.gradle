plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
}

android {
    compileSdk defaultCompileSdkVersion
    compileOptions {
        sourceCompatibility javaCompileVersion
        targetCompatibility javaCompileVersion
    }
    kotlinOptions {
        jvmTarget = jvmTarget
    }
    defaultConfig {
        applicationId "com.tezov.bank"
        resConfigs 'en', 'fr'
        versionCode 4
        minSdk defaultMinCompileSdkVersion
        targetSdk defaultTargetCompileSdkVersion
        testInstrumentationRunner "com.tezov.bank.jUnit.JUnitRunner"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }
    packagingOptions {
        resources {
            pickFirst 'META-INF/gradle/incremental.annotation.processors'
            excludes.add('META-INF/DEPENDENCIES')
            excludes.add('META-INF/LICENSE')
            excludes.add('META-INF/LICENSE.txt')
            excludes.add('META-INF/license.txt')
            excludes.add('META-INF/NOTICE')
            excludes.add('META-INF/NOTICE')
            excludes.add('META-INF/NOTICE.txt')
            excludes.add('META-INF/notice.txt')
            excludes.add('META-INF/ASL2.0')
            excludes.add('META-INF/LGPL2.1')
//            excludes.add('META-INF/*.kotlin_module')
//            excludes.add("META-INF/**")
        }
    }
    signingConfigs {
        releaseConfig {
            def keystoreReleaseProperties = new Properties()
            keystoreReleaseProperties.load(new FileInputStream(file("keyStoreRelease.properties")))
            storeFile file(keystoreReleaseProperties.storeFile)
            storePassword keystoreReleaseProperties.storePassword
            keyAlias keystoreReleaseProperties.keyAlias
            keyPassword keystoreReleaseProperties.keyPassword
        }
        debugConfig {
            def keystoreDebugProperties = new Properties()
            keystoreDebugProperties.load(new FileInputStream(file("keyStoreDebug.properties")))
            storeFile file(keystoreDebugProperties.storeFile)
            storePassword keystoreDebugProperties.storePassword
            keyAlias keystoreDebugProperties.keyAlias
            keyPassword keystoreDebugProperties.keyPassword
        }
    }
    buildTypes {
        release {
            applicationIdSuffix ".rse"
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            applicationIdSuffix ".dbg"
            shrinkResources false
            minifyEnabled false
//            proguardFiles file('../proguard/proguard-rules-test.txt')
            debuggable true
            signingConfig signingConfigs.debugConfig
        }
    }
    sourceSets {
        main {
            def main_layouts = file('src/main/res/layouts').listFiles()
            res {
                srcDirs 'src/main/res', main_layouts
            }
            java {
                srcDirs 'src/main/java', 'src/main/kotlin'
                filter.exclude '**/*TODO*'
            }
        }
        debug {
            res {
                srcDirs 'src/build_type/debug/res'
            }
            java {
                srcDirs 'src/build_type/debug/java', 'src/build_type/debug/kotlin'
            }
        }
        release {
            res {
                srcDirs 'src/build_type/release/res'
            }
            java {
                srcDirs 'src/build_type/release/java', 'src/build_type/release/kotlin'
            }
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
//        disable 'InvalidPackage'
    }
    namespace 'com.tezov.bank'
}

dependencies {
    implementation project(':lib_core_kotlin')
    implementation project(':lib_core_android_kotlin')

    implementation dependencies_lib.lib.threetenabp
    implementation dependencies_lib.lib.webkit

    implementation dependencies_lib.lib.dagger
    kapt dependencies_lib.lib.dagger_kapt

    // test
    testImplementation project(':test_common')
    androidTestImplementation project(':test_common')
    debugImplementation dependencies_test.core_integration.compose_ui_manifest
}